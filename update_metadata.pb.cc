// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update_metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "update_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chromeos_update_engine {

void protobuf_ShutdownFile_update_5fmetadata_2eproto() {
  delete Extent::default_instance_;
  delete Signatures::default_instance_;
  delete Signatures_Signature::default_instance_;
  delete PartitionInfo::default_instance_;
  delete ImageInfo::default_instance_;
  delete InstallOperation::default_instance_;
  delete PartitionUpdate::default_instance_;
  delete DeltaArchiveManifest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_update_5fmetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_update_5fmetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_update_5fmetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Extent::default_instance_ = new Extent();
  Signatures::default_instance_ = new Signatures();
  Signatures_Signature::default_instance_ = new Signatures_Signature();
  PartitionInfo::default_instance_ = new PartitionInfo();
  ImageInfo::default_instance_ = new ImageInfo();
  InstallOperation::default_instance_ = new InstallOperation();
  PartitionUpdate::default_instance_ = new PartitionUpdate();
  DeltaArchiveManifest::default_instance_ = new DeltaArchiveManifest();
  Extent::default_instance_->InitAsDefaultInstance();
  Signatures::default_instance_->InitAsDefaultInstance();
  Signatures_Signature::default_instance_->InitAsDefaultInstance();
  PartitionInfo::default_instance_->InitAsDefaultInstance();
  ImageInfo::default_instance_->InitAsDefaultInstance();
  InstallOperation::default_instance_->InitAsDefaultInstance();
  PartitionUpdate::default_instance_->InitAsDefaultInstance();
  DeltaArchiveManifest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_update_5fmetadata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_update_5fmetadata_2eproto_once_);
void protobuf_AddDesc_update_5fmetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_update_5fmetadata_2eproto_once_,
                 &protobuf_AddDesc_update_5fmetadata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_update_5fmetadata_2eproto {
  StaticDescriptorInitializer_update_5fmetadata_2eproto() {
    protobuf_AddDesc_update_5fmetadata_2eproto();
  }
} static_descriptor_initializer_update_5fmetadata_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForExtent(
    Extent* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extent::kStartBlockFieldNumber;
const int Extent::kNumBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extent::Extent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.Extent)
}

void Extent::InitAsDefaultInstance() {
}

Extent::Extent(const Extent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.Extent)
}

void Extent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_block_ = GOOGLE_ULONGLONG(0);
  num_blocks_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Extent::~Extent() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.Extent)
  SharedDtor();
}

void Extent::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Extent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Extent& Extent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

Extent* Extent::default_instance_ = NULL;

Extent* Extent::New(::google::protobuf::Arena* arena) const {
  Extent* n = new Extent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extent::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.Extent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Extent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Extent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_block_, num_blocks_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Extent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForExtent, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.Extent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_block = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_block_)));
          set_has_start_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_blocks;
        break;
      }

      // optional uint64 num_blocks = 2;
      case 2: {
        if (tag == 16) {
         parse_num_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_blocks_)));
          set_has_num_blocks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.Extent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.Extent)
  return false;
#undef DO_
}

void Extent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.Extent)
  // optional uint64 start_block = 1;
  if (has_start_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_block(), output);
  }

  // optional uint64 num_blocks = 2;
  if (has_num_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_blocks(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.Extent)
}

int Extent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.Extent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 start_block = 1;
    if (has_start_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_block());
    }

    // optional uint64 num_blocks = 2;
    if (has_num_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_blocks());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Extent*>(&from));
}

void Extent::MergeFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.Extent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_block()) {
      set_start_block(from.start_block());
    }
    if (from.has_num_blocks()) {
      set_num_blocks(from.num_blocks());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Extent::CopyFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.Extent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extent::IsInitialized() const {

  return true;
}

void Extent::Swap(Extent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extent::InternalSwap(Extent* other) {
  std::swap(start_block_, other->start_block_);
  std::swap(num_blocks_, other->num_blocks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Extent::GetTypeName() const {
  return "chromeos_update_engine.Extent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extent

// optional uint64 start_block = 1;
bool Extent::has_start_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Extent::set_has_start_block() {
  _has_bits_[0] |= 0x00000001u;
}
void Extent::clear_has_start_block() {
  _has_bits_[0] &= ~0x00000001u;
}
void Extent::clear_start_block() {
  start_block_ = GOOGLE_ULONGLONG(0);
  clear_has_start_block();
}
 ::google::protobuf::uint64 Extent::start_block() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Extent.start_block)
  return start_block_;
}
 void Extent::set_start_block(::google::protobuf::uint64 value) {
  set_has_start_block();
  start_block_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Extent.start_block)
}

// optional uint64 num_blocks = 2;
bool Extent::has_num_blocks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Extent::set_has_num_blocks() {
  _has_bits_[0] |= 0x00000002u;
}
void Extent::clear_has_num_blocks() {
  _has_bits_[0] &= ~0x00000002u;
}
void Extent::clear_num_blocks() {
  num_blocks_ = GOOGLE_ULONGLONG(0);
  clear_has_num_blocks();
}
 ::google::protobuf::uint64 Extent::num_blocks() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Extent.num_blocks)
  return num_blocks_;
}
 void Extent::set_num_blocks(::google::protobuf::uint64 value) {
  set_has_num_blocks();
  num_blocks_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Extent.num_blocks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSignatures(
    Signatures* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSignatures_Signature(
    Signatures_Signature* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signatures_Signature::kVersionFieldNumber;
const int Signatures_Signature::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signatures_Signature::Signatures_Signature()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.Signatures.Signature)
}

void Signatures_Signature::InitAsDefaultInstance() {
}

Signatures_Signature::Signatures_Signature(const Signatures_Signature& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.Signatures.Signature)
}

void Signatures_Signature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signatures_Signature::~Signatures_Signature() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.Signatures.Signature)
  SharedDtor();
}

void Signatures_Signature::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Signatures_Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Signatures_Signature& Signatures_Signature::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

Signatures_Signature* Signatures_Signature::default_instance_ = NULL;

Signatures_Signature* Signatures_Signature::New(::google::protobuf::Arena* arena) const {
  Signatures_Signature* n = new Signatures_Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signatures_Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.Signatures.Signature)
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0u;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Signatures_Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSignatures_Signature, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.Signatures.Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.Signatures.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.Signatures.Signature)
  return false;
#undef DO_
}

void Signatures_Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.Signatures.Signature)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.Signatures.Signature)
}

int Signatures_Signature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.Signatures.Signature)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signatures_Signature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Signatures_Signature*>(&from));
}

void Signatures_Signature::MergeFrom(const Signatures_Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.Signatures.Signature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Signatures_Signature::CopyFrom(const Signatures_Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.Signatures.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signatures_Signature::IsInitialized() const {

  return true;
}

void Signatures_Signature::Swap(Signatures_Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signatures_Signature::InternalSwap(Signatures_Signature* other) {
  std::swap(version_, other->version_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Signatures_Signature::GetTypeName() const {
  return "chromeos_update_engine.Signatures.Signature";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signatures::kSignaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signatures::Signatures()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.Signatures)
}

void Signatures::InitAsDefaultInstance() {
}

Signatures::Signatures(const Signatures& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.Signatures)
}

void Signatures::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signatures::~Signatures() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.Signatures)
  SharedDtor();
}

void Signatures::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Signatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Signatures& Signatures::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

Signatures* Signatures::default_instance_ = NULL;

Signatures* Signatures::New(::google::protobuf::Arena* arena) const {
  Signatures* n = new Signatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signatures::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.Signatures)
  signatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Signatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSignatures, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.Signatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_signatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_signatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.Signatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.Signatures)
  return false;
#undef DO_
}

void Signatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.Signatures)
  // repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
  for (unsigned int i = 0, n = this->signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->signatures(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.Signatures)
}

int Signatures::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.Signatures)
  int total_size = 0;

  // repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
  total_size += 1 * this->signatures_size();
  for (int i = 0; i < this->signatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signatures(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signatures::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Signatures*>(&from));
}

void Signatures::MergeFrom(const Signatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.Signatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  signatures_.MergeFrom(from.signatures_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Signatures::CopyFrom(const Signatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.Signatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signatures::IsInitialized() const {

  return true;
}

void Signatures::Swap(Signatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signatures::InternalSwap(Signatures* other) {
  signatures_.UnsafeArenaSwap(&other->signatures_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Signatures::GetTypeName() const {
  return "chromeos_update_engine.Signatures";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signatures_Signature

// optional uint32 version = 1;
bool Signatures_Signature::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signatures_Signature::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Signatures_Signature::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signatures_Signature::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 Signatures_Signature::version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Signatures.Signature.version)
  return version_;
}
 void Signatures_Signature::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Signatures.Signature.version)
}

// optional bytes data = 2;
bool Signatures_Signature::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signatures_Signature::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Signatures_Signature::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signatures_Signature::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& Signatures_Signature::data() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Signatures.Signature.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Signatures_Signature::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Signatures.Signature.data)
}
 void Signatures_Signature::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.Signatures.Signature.data)
}
 void Signatures_Signature::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.Signatures.Signature.data)
}
 ::std::string* Signatures_Signature::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.Signatures.Signature.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Signatures_Signature::release_data() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.Signatures.Signature.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Signatures_Signature::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.Signatures.Signature.data)
}

// -------------------------------------------------------------------

// Signatures

// repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
int Signatures::signatures_size() const {
  return signatures_.size();
}
void Signatures::clear_signatures() {
  signatures_.Clear();
}
const ::chromeos_update_engine::Signatures_Signature& Signatures::signatures(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Signatures.signatures)
  return signatures_.Get(index);
}
::chromeos_update_engine::Signatures_Signature* Signatures::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.Signatures.signatures)
  return signatures_.Mutable(index);
}
::chromeos_update_engine::Signatures_Signature* Signatures::add_signatures() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.Signatures.signatures)
  return signatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >*
Signatures::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.Signatures.signatures)
  return &signatures_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >&
Signatures::signatures() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.Signatures.signatures)
  return signatures_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPartitionInfo(
    PartitionInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionInfo::kSizeFieldNumber;
const int PartitionInfo::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionInfo::PartitionInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.PartitionInfo)
}

void PartitionInfo::InitAsDefaultInstance() {
}

PartitionInfo::PartitionInfo(const PartitionInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.PartitionInfo)
}

void PartitionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionInfo::~PartitionInfo() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.PartitionInfo)
  SharedDtor();
}

void PartitionInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PartitionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PartitionInfo& PartitionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

PartitionInfo* PartitionInfo::default_instance_ = NULL;

PartitionInfo* PartitionInfo::New(::google::protobuf::Arena* arena) const {
  PartitionInfo* n = new PartitionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.PartitionInfo)
  if (_has_bits_[0 / 32] & 3u) {
    size_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PartitionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForPartitionInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.PartitionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.PartitionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.PartitionInfo)
  return false;
#undef DO_
}

void PartitionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.PartitionInfo)
  // optional uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.PartitionInfo)
}

int PartitionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.PartitionInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional bytes hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PartitionInfo*>(&from));
}

void PartitionInfo::MergeFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.PartitionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PartitionInfo::CopyFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.PartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionInfo::IsInitialized() const {

  return true;
}

void PartitionInfo::Swap(PartitionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionInfo::InternalSwap(PartitionInfo* other) {
  std::swap(size_, other->size_);
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PartitionInfo::GetTypeName() const {
  return "chromeos_update_engine.PartitionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionInfo

// optional uint64 size = 1;
bool PartitionInfo::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartitionInfo::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void PartitionInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartitionInfo::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 PartitionInfo::size() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionInfo.size)
  return size_;
}
 void PartitionInfo::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionInfo.size)
}

// optional bytes hash = 2;
bool PartitionInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PartitionInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void PartitionInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void PartitionInfo::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& PartitionInfo::hash() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionInfo.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionInfo::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionInfo.hash)
}
 void PartitionInfo::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionInfo.hash)
}
 void PartitionInfo::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionInfo.hash)
}
 ::std::string* PartitionInfo::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionInfo.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartitionInfo::release_hash() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionInfo.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionInfo::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionInfo.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForImageInfo(
    ImageInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kBoardFieldNumber;
const int ImageInfo::kKeyFieldNumber;
const int ImageInfo::kChannelFieldNumber;
const int ImageInfo::kVersionFieldNumber;
const int ImageInfo::kBuildChannelFieldNumber;
const int ImageInfo::kBuildVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.ImageInfo)
}

void ImageInfo::InitAsDefaultInstance() {
}

ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.ImageInfo)
}

void ImageInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageInfo& ImageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

ImageInfo* ImageInfo::default_instance_ = NULL;

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.ImageInfo)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_board()) {
      board_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_channel()) {
      channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_build_channel()) {
      build_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_build_version()) {
      build_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForImageInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string board = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_build_channel;
        break;
      }

      // optional string build_channel = 5;
      case 5: {
        if (tag == 42) {
         parse_build_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_build_version;
        break;
      }

      // optional string build_version = 6;
      case 6: {
        if (tag == 50) {
         parse_build_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.ImageInfo)
  // optional string board = 1;
  if (has_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->board(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // optional string build_channel = 5;
  if (has_build_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->build_channel(), output);
  }

  // optional string build_version = 6;
  if (has_build_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->build_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.ImageInfo)
}

int ImageInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.ImageInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string board = 1;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string build_channel = 5;
    if (has_build_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_channel());
    }

    // optional string build_version = 6;
    if (has_build_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageInfo*>(&from));
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.ImageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_board()) {
      set_has_board();
      board_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_channel()) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_build_channel()) {
      set_has_build_channel();
      build_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_channel_);
    }
    if (from.has_build_version()) {
      set_has_build_version();
      build_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_version_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {

  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  board_.Swap(&other->board_);
  key_.Swap(&other->key_);
  channel_.Swap(&other->channel_);
  version_.Swap(&other->version_);
  build_channel_.Swap(&other->build_channel_);
  build_version_.Swap(&other->build_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageInfo::GetTypeName() const {
  return "chromeos_update_engine.ImageInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageInfo

// optional string board = 1;
bool ImageInfo::has_board() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageInfo::set_has_board() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageInfo::clear_has_board() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageInfo::clear_board() {
  board_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_board();
}
 const ::std::string& ImageInfo::board() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.board)
  return board_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_board(const ::std::string& value) {
  set_has_board();
  board_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.board)
}
 void ImageInfo::set_board(const char* value) {
  set_has_board();
  board_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.board)
}
 void ImageInfo::set_board(const char* value, size_t size) {
  set_has_board();
  board_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.board)
}
 ::std::string* ImageInfo::mutable_board() {
  set_has_board();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.board)
  return board_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageInfo::release_board() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.board)
  clear_has_board();
  return board_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_allocated_board(::std::string* board) {
  if (board != NULL) {
    set_has_board();
  } else {
    clear_has_board();
  }
  board_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), board);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.board)
}

// optional string key = 2;
bool ImageInfo::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageInfo::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& ImageInfo::key() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.key)
}
 void ImageInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.key)
}
 void ImageInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.key)
}
 ::std::string* ImageInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageInfo::release_key() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.key)
}

// optional string channel = 3;
bool ImageInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
 const ::std::string& ImageInfo::channel() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.channel)
  return channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.channel)
}
 void ImageInfo::set_channel(const char* value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.channel)
}
 void ImageInfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.channel)
}
 ::std::string* ImageInfo::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageInfo::release_channel() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.channel)
  clear_has_channel();
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.channel)
}

// optional string version = 4;
bool ImageInfo::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageInfo::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ImageInfo::version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.version)
}
 void ImageInfo::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.version)
}
 void ImageInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.version)
}
 ::std::string* ImageInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageInfo::release_version() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.version)
}

// optional string build_channel = 5;
bool ImageInfo::has_build_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageInfo::set_has_build_channel() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageInfo::clear_has_build_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageInfo::clear_build_channel() {
  build_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build_channel();
}
 const ::std::string& ImageInfo::build_channel() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.build_channel)
  return build_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_build_channel(const ::std::string& value) {
  set_has_build_channel();
  build_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.build_channel)
}
 void ImageInfo::set_build_channel(const char* value) {
  set_has_build_channel();
  build_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.build_channel)
}
 void ImageInfo::set_build_channel(const char* value, size_t size) {
  set_has_build_channel();
  build_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.build_channel)
}
 ::std::string* ImageInfo::mutable_build_channel() {
  set_has_build_channel();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.build_channel)
  return build_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageInfo::release_build_channel() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.build_channel)
  clear_has_build_channel();
  return build_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_allocated_build_channel(::std::string* build_channel) {
  if (build_channel != NULL) {
    set_has_build_channel();
  } else {
    clear_has_build_channel();
  }
  build_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_channel);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.build_channel)
}

// optional string build_version = 6;
bool ImageInfo::has_build_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageInfo::set_has_build_version() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageInfo::clear_has_build_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageInfo::clear_build_version() {
  build_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build_version();
}
 const ::std::string& ImageInfo::build_version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.build_version)
  return build_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_build_version(const ::std::string& value) {
  set_has_build_version();
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.build_version)
}
 void ImageInfo::set_build_version(const char* value) {
  set_has_build_version();
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.build_version)
}
 void ImageInfo::set_build_version(const char* value, size_t size) {
  set_has_build_version();
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.build_version)
}
 ::std::string* ImageInfo::mutable_build_version() {
  set_has_build_version();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.build_version)
  return build_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageInfo::release_build_version() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.build_version)
  clear_has_build_version();
  return build_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageInfo::set_allocated_build_version(::std::string* build_version) {
  if (build_version != NULL) {
    set_has_build_version();
  } else {
    clear_has_build_version();
  }
  build_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_version);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.build_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInstallOperation(
    InstallOperation* ptr) {
  return ptr->mutable_unknown_fields();
}

bool InstallOperation_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InstallOperation_Type InstallOperation::REPLACE;
const InstallOperation_Type InstallOperation::REPLACE_BZ;
const InstallOperation_Type InstallOperation::MOVE;
const InstallOperation_Type InstallOperation::BSDIFF;
const InstallOperation_Type InstallOperation::SOURCE_COPY;
const InstallOperation_Type InstallOperation::SOURCE_BSDIFF;
const InstallOperation_Type InstallOperation::REPLACE_XZ;
const InstallOperation_Type InstallOperation::ZERO;
const InstallOperation_Type InstallOperation::DISCARD;
const InstallOperation_Type InstallOperation::BROTLI_BSDIFF;
const InstallOperation_Type InstallOperation::PUFFDIFF;
const InstallOperation_Type InstallOperation::Type_MIN;
const InstallOperation_Type InstallOperation::Type_MAX;
const int InstallOperation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallOperation::kTypeFieldNumber;
const int InstallOperation::kDataOffsetFieldNumber;
const int InstallOperation::kDataLengthFieldNumber;
const int InstallOperation::kSrcExtentsFieldNumber;
const int InstallOperation::kSrcLengthFieldNumber;
const int InstallOperation::kDstExtentsFieldNumber;
const int InstallOperation::kDstLengthFieldNumber;
const int InstallOperation::kDataSha256HashFieldNumber;
const int InstallOperation::kSrcSha256HashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallOperation::InstallOperation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.InstallOperation)
}

void InstallOperation::InitAsDefaultInstance() {
}

InstallOperation::InstallOperation(const InstallOperation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.InstallOperation)
}

void InstallOperation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  data_offset_ = 0u;
  data_length_ = 0u;
  src_length_ = GOOGLE_ULONGLONG(0);
  dst_length_ = GOOGLE_ULONGLONG(0);
  data_sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallOperation::~InstallOperation() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.InstallOperation)
  SharedDtor();
}

void InstallOperation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_sha256_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_sha256_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstallOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstallOperation& InstallOperation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

InstallOperation* InstallOperation::default_instance_ = NULL;

InstallOperation* InstallOperation::New(::google::protobuf::Arena* arena) const {
  InstallOperation* n = new InstallOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.InstallOperation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InstallOperation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InstallOperation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 215u) {
    ZR_(type_, data_offset_);
    data_length_ = 0u;
    src_length_ = GOOGLE_ULONGLONG(0);
    dst_length_ = GOOGLE_ULONGLONG(0);
    if (has_data_sha256_hash()) {
      data_sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_src_sha256_hash()) {
    src_sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  src_extents_.Clear();
  dst_extents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InstallOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForInstallOperation, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.InstallOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chromeos_update_engine.InstallOperation.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chromeos_update_engine::InstallOperation_Type_IsValid(value)) {
            set_type(static_cast< ::chromeos_update_engine::InstallOperation_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_offset;
        break;
      }

      // optional uint32 data_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_data_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_offset_)));
          set_has_data_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_length;
        break;
      }

      // optional uint32 data_length = 3;
      case 3: {
        if (tag == 24) {
         parse_data_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_length_)));
          set_has_data_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_src_extents;
        break;
      }

      // repeated .chromeos_update_engine.Extent src_extents = 4;
      case 4: {
        if (tag == 34) {
         parse_src_extents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_src_extents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_src_extents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_src_extents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_src_length;
        break;
      }

      // optional uint64 src_length = 5;
      case 5: {
        if (tag == 40) {
         parse_src_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_length_)));
          set_has_src_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dst_extents;
        break;
      }

      // repeated .chromeos_update_engine.Extent dst_extents = 6;
      case 6: {
        if (tag == 50) {
         parse_dst_extents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_dst_extents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dst_extents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_dst_extents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_dst_length;
        break;
      }

      // optional uint64 dst_length = 7;
      case 7: {
        if (tag == 56) {
         parse_dst_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_length_)));
          set_has_dst_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data_sha256_hash;
        break;
      }

      // optional bytes data_sha256_hash = 8;
      case 8: {
        if (tag == 66) {
         parse_data_sha256_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_src_sha256_hash;
        break;
      }

      // optional bytes src_sha256_hash = 9;
      case 9: {
        if (tag == 74) {
         parse_src_sha256_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.InstallOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.InstallOperation)
  return false;
#undef DO_
}

void InstallOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.InstallOperation)
  // required .chromeos_update_engine.InstallOperation.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 data_offset = 2;
  if (has_data_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_offset(), output);
  }

  // optional uint32 data_length = 3;
  if (has_data_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_length(), output);
  }

  // repeated .chromeos_update_engine.Extent src_extents = 4;
  for (unsigned int i = 0, n = this->src_extents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->src_extents(i), output);
  }

  // optional uint64 src_length = 5;
  if (has_src_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->src_length(), output);
  }

  // repeated .chromeos_update_engine.Extent dst_extents = 6;
  for (unsigned int i = 0, n = this->dst_extents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->dst_extents(i), output);
  }

  // optional uint64 dst_length = 7;
  if (has_dst_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dst_length(), output);
  }

  // optional bytes data_sha256_hash = 8;
  if (has_data_sha256_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data_sha256_hash(), output);
  }

  // optional bytes src_sha256_hash = 9;
  if (has_src_sha256_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->src_sha256_hash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.InstallOperation)
}

int InstallOperation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.InstallOperation)
  int total_size = 0;

  // required .chromeos_update_engine.InstallOperation.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 214u) {
    // optional uint32 data_offset = 2;
    if (has_data_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_offset());
    }

    // optional uint32 data_length = 3;
    if (has_data_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_length());
    }

    // optional uint64 src_length = 5;
    if (has_src_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_length());
    }

    // optional uint64 dst_length = 7;
    if (has_dst_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_length());
    }

    // optional bytes data_sha256_hash = 8;
    if (has_data_sha256_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_sha256_hash());
    }

  }
  // optional bytes src_sha256_hash = 9;
  if (has_src_sha256_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->src_sha256_hash());
  }

  // repeated .chromeos_update_engine.Extent src_extents = 4;
  total_size += 1 * this->src_extents_size();
  for (int i = 0; i < this->src_extents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->src_extents(i));
  }

  // repeated .chromeos_update_engine.Extent dst_extents = 6;
  total_size += 1 * this->dst_extents_size();
  for (int i = 0; i < this->dst_extents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dst_extents(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstallOperation*>(&from));
}

void InstallOperation::MergeFrom(const InstallOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.InstallOperation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  src_extents_.MergeFrom(from.src_extents_);
  dst_extents_.MergeFrom(from.dst_extents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data_offset()) {
      set_data_offset(from.data_offset());
    }
    if (from.has_data_length()) {
      set_data_length(from.data_length());
    }
    if (from.has_src_length()) {
      set_src_length(from.src_length());
    }
    if (from.has_dst_length()) {
      set_dst_length(from.dst_length());
    }
    if (from.has_data_sha256_hash()) {
      set_has_data_sha256_hash();
      data_sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_sha256_hash_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_src_sha256_hash()) {
      set_has_src_sha256_hash();
      src_sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_sha256_hash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InstallOperation::CopyFrom(const InstallOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.InstallOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstallOperation::Swap(InstallOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallOperation::InternalSwap(InstallOperation* other) {
  std::swap(type_, other->type_);
  std::swap(data_offset_, other->data_offset_);
  std::swap(data_length_, other->data_length_);
  src_extents_.UnsafeArenaSwap(&other->src_extents_);
  std::swap(src_length_, other->src_length_);
  dst_extents_.UnsafeArenaSwap(&other->dst_extents_);
  std::swap(dst_length_, other->dst_length_);
  data_sha256_hash_.Swap(&other->data_sha256_hash_);
  src_sha256_hash_.Swap(&other->src_sha256_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InstallOperation::GetTypeName() const {
  return "chromeos_update_engine.InstallOperation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallOperation

// required .chromeos_update_engine.InstallOperation.Type type = 1;
bool InstallOperation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstallOperation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void InstallOperation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void InstallOperation::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::chromeos_update_engine::InstallOperation_Type InstallOperation::type() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.type)
  return static_cast< ::chromeos_update_engine::InstallOperation_Type >(type_);
}
 void InstallOperation::set_type(::chromeos_update_engine::InstallOperation_Type value) {
  assert(::chromeos_update_engine::InstallOperation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.type)
}

// optional uint32 data_offset = 2;
bool InstallOperation::has_data_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstallOperation::set_has_data_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void InstallOperation::clear_has_data_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void InstallOperation::clear_data_offset() {
  data_offset_ = 0u;
  clear_has_data_offset();
}
 ::google::protobuf::uint32 InstallOperation::data_offset() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.data_offset)
  return data_offset_;
}
 void InstallOperation::set_data_offset(::google::protobuf::uint32 value) {
  set_has_data_offset();
  data_offset_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.data_offset)
}

// optional uint32 data_length = 3;
bool InstallOperation::has_data_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InstallOperation::set_has_data_length() {
  _has_bits_[0] |= 0x00000004u;
}
void InstallOperation::clear_has_data_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void InstallOperation::clear_data_length() {
  data_length_ = 0u;
  clear_has_data_length();
}
 ::google::protobuf::uint32 InstallOperation::data_length() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.data_length)
  return data_length_;
}
 void InstallOperation::set_data_length(::google::protobuf::uint32 value) {
  set_has_data_length();
  data_length_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.data_length)
}

// repeated .chromeos_update_engine.Extent src_extents = 4;
int InstallOperation::src_extents_size() const {
  return src_extents_.size();
}
void InstallOperation::clear_src_extents() {
  src_extents_.Clear();
}
const ::chromeos_update_engine::Extent& InstallOperation::src_extents(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_.Get(index);
}
::chromeos_update_engine::Extent* InstallOperation::mutable_src_extents(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_.Mutable(index);
}
::chromeos_update_engine::Extent* InstallOperation::add_src_extents() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >*
InstallOperation::mutable_src_extents() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.InstallOperation.src_extents)
  return &src_extents_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >&
InstallOperation::src_extents() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_;
}

// optional uint64 src_length = 5;
bool InstallOperation::has_src_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InstallOperation::set_has_src_length() {
  _has_bits_[0] |= 0x00000010u;
}
void InstallOperation::clear_has_src_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void InstallOperation::clear_src_length() {
  src_length_ = GOOGLE_ULONGLONG(0);
  clear_has_src_length();
}
 ::google::protobuf::uint64 InstallOperation::src_length() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.src_length)
  return src_length_;
}
 void InstallOperation::set_src_length(::google::protobuf::uint64 value) {
  set_has_src_length();
  src_length_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.src_length)
}

// repeated .chromeos_update_engine.Extent dst_extents = 6;
int InstallOperation::dst_extents_size() const {
  return dst_extents_.size();
}
void InstallOperation::clear_dst_extents() {
  dst_extents_.Clear();
}
const ::chromeos_update_engine::Extent& InstallOperation::dst_extents(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_.Get(index);
}
::chromeos_update_engine::Extent* InstallOperation::mutable_dst_extents(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_.Mutable(index);
}
::chromeos_update_engine::Extent* InstallOperation::add_dst_extents() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >*
InstallOperation::mutable_dst_extents() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.InstallOperation.dst_extents)
  return &dst_extents_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >&
InstallOperation::dst_extents() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_;
}

// optional uint64 dst_length = 7;
bool InstallOperation::has_dst_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InstallOperation::set_has_dst_length() {
  _has_bits_[0] |= 0x00000040u;
}
void InstallOperation::clear_has_dst_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void InstallOperation::clear_dst_length() {
  dst_length_ = GOOGLE_ULONGLONG(0);
  clear_has_dst_length();
}
 ::google::protobuf::uint64 InstallOperation::dst_length() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.dst_length)
  return dst_length_;
}
 void InstallOperation::set_dst_length(::google::protobuf::uint64 value) {
  set_has_dst_length();
  dst_length_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.dst_length)
}

// optional bytes data_sha256_hash = 8;
bool InstallOperation::has_data_sha256_hash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InstallOperation::set_has_data_sha256_hash() {
  _has_bits_[0] |= 0x00000080u;
}
void InstallOperation::clear_has_data_sha256_hash() {
  _has_bits_[0] &= ~0x00000080u;
}
void InstallOperation::clear_data_sha256_hash() {
  data_sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_sha256_hash();
}
 const ::std::string& InstallOperation::data_sha256_hash() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.data_sha256_hash)
  return data_sha256_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstallOperation::set_data_sha256_hash(const ::std::string& value) {
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
 void InstallOperation::set_data_sha256_hash(const char* value) {
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
 void InstallOperation::set_data_sha256_hash(const void* value, size_t size) {
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
 ::std::string* InstallOperation::mutable_data_sha256_hash() {
  set_has_data_sha256_hash();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.data_sha256_hash)
  return data_sha256_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstallOperation::release_data_sha256_hash() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.InstallOperation.data_sha256_hash)
  clear_has_data_sha256_hash();
  return data_sha256_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstallOperation::set_allocated_data_sha256_hash(::std::string* data_sha256_hash) {
  if (data_sha256_hash != NULL) {
    set_has_data_sha256_hash();
  } else {
    clear_has_data_sha256_hash();
  }
  data_sha256_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.InstallOperation.data_sha256_hash)
}

// optional bytes src_sha256_hash = 9;
bool InstallOperation::has_src_sha256_hash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InstallOperation::set_has_src_sha256_hash() {
  _has_bits_[0] |= 0x00000100u;
}
void InstallOperation::clear_has_src_sha256_hash() {
  _has_bits_[0] &= ~0x00000100u;
}
void InstallOperation::clear_src_sha256_hash() {
  src_sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_sha256_hash();
}
 const ::std::string& InstallOperation::src_sha256_hash() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.src_sha256_hash)
  return src_sha256_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstallOperation::set_src_sha256_hash(const ::std::string& value) {
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
 void InstallOperation::set_src_sha256_hash(const char* value) {
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
 void InstallOperation::set_src_sha256_hash(const void* value, size_t size) {
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
 ::std::string* InstallOperation::mutable_src_sha256_hash() {
  set_has_src_sha256_hash();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.src_sha256_hash)
  return src_sha256_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstallOperation::release_src_sha256_hash() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.InstallOperation.src_sha256_hash)
  clear_has_src_sha256_hash();
  return src_sha256_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstallOperation::set_allocated_src_sha256_hash(::std::string* src_sha256_hash) {
  if (src_sha256_hash != NULL) {
    set_has_src_sha256_hash();
  } else {
    clear_has_src_sha256_hash();
  }
  src_sha256_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.InstallOperation.src_sha256_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPartitionUpdate(
    PartitionUpdate* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionUpdate::kPartitionNameFieldNumber;
const int PartitionUpdate::kRunPostinstallFieldNumber;
const int PartitionUpdate::kPostinstallPathFieldNumber;
const int PartitionUpdate::kFilesystemTypeFieldNumber;
const int PartitionUpdate::kNewPartitionSignatureFieldNumber;
const int PartitionUpdate::kOldPartitionInfoFieldNumber;
const int PartitionUpdate::kNewPartitionInfoFieldNumber;
const int PartitionUpdate::kOperationsFieldNumber;
const int PartitionUpdate::kPostinstallOptionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionUpdate::PartitionUpdate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.PartitionUpdate)
}

void PartitionUpdate::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  old_partition_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
#else
  old_partition_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(&::chromeos_update_engine::PartitionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_partition_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
#else
  new_partition_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(&::chromeos_update_engine::PartitionInfo::default_instance());
#endif
}

PartitionUpdate::PartitionUpdate(const PartitionUpdate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.PartitionUpdate)
}

void PartitionUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_postinstall_ = false;
  postinstall_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesystem_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_partition_info_ = NULL;
  new_partition_info_ = NULL;
  postinstall_optional_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionUpdate::~PartitionUpdate() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.PartitionUpdate)
  SharedDtor();
}

void PartitionUpdate::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postinstall_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesystem_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete old_partition_info_;
    delete new_partition_info_;
  }
}

void PartitionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PartitionUpdate& PartitionUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

PartitionUpdate* PartitionUpdate::default_instance_ = NULL;

PartitionUpdate* PartitionUpdate::New(::google::protobuf::Arena* arena) const {
  PartitionUpdate* n = new PartitionUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.PartitionUpdate)
  if (_has_bits_[0 / 32] & 111u) {
    if (has_partition_name()) {
      partition_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    run_postinstall_ = false;
    if (has_postinstall_path()) {
      postinstall_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_filesystem_type()) {
      filesystem_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_old_partition_info()) {
      if (old_partition_info_ != NULL) old_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (has_new_partition_info()) {
      if (new_partition_info_ != NULL) new_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
  }
  postinstall_optional_ = false;
  new_partition_signature_.Clear();
  operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PartitionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForPartitionUpdate, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.PartitionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string partition_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_run_postinstall;
        break;
      }

      // optional bool run_postinstall = 2;
      case 2: {
        if (tag == 16) {
         parse_run_postinstall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &run_postinstall_)));
          set_has_run_postinstall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_postinstall_path;
        break;
      }

      // optional string postinstall_path = 3;
      case 3: {
        if (tag == 26) {
         parse_postinstall_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postinstall_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filesystem_type;
        break;
      }

      // optional string filesystem_type = 4;
      case 4: {
        if (tag == 34) {
         parse_filesystem_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filesystem_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_new_partition_signature;
        break;
      }

      // repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
      case 5: {
        if (tag == 42) {
         parse_new_partition_signature:
          DO_(input->IncrementRecursionDepth());
         parse_loop_new_partition_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_new_partition_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_new_partition_signature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_old_partition_info;
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
      case 6: {
        if (tag == 50) {
         parse_old_partition_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_partition_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_new_partition_info;
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
      case 7: {
        if (tag == 58) {
         parse_new_partition_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_partition_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_operations;
        break;
      }

      // repeated .chromeos_update_engine.InstallOperation operations = 8;
      case 8: {
        if (tag == 66) {
         parse_operations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_operations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_postinstall_optional;
        break;
      }

      // optional bool postinstall_optional = 9;
      case 9: {
        if (tag == 72) {
         parse_postinstall_optional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &postinstall_optional_)));
          set_has_postinstall_optional();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.PartitionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.PartitionUpdate)
  return false;
#undef DO_
}

void PartitionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.PartitionUpdate)
  // required string partition_name = 1;
  if (has_partition_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partition_name(), output);
  }

  // optional bool run_postinstall = 2;
  if (has_run_postinstall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->run_postinstall(), output);
  }

  // optional string postinstall_path = 3;
  if (has_postinstall_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->postinstall_path(), output);
  }

  // optional string filesystem_type = 4;
  if (has_filesystem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filesystem_type(), output);
  }

  // repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
  for (unsigned int i = 0, n = this->new_partition_signature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->new_partition_signature(i), output);
  }

  // optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
  if (has_old_partition_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->old_partition_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
  if (has_new_partition_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->new_partition_info_, output);
  }

  // repeated .chromeos_update_engine.InstallOperation operations = 8;
  for (unsigned int i = 0, n = this->operations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->operations(i), output);
  }

  // optional bool postinstall_optional = 9;
  if (has_postinstall_optional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->postinstall_optional(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.PartitionUpdate)
}

int PartitionUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.PartitionUpdate)
  int total_size = 0;

  // required string partition_name = 1;
  if (has_partition_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partition_name());
  }
  if (_has_bits_[1 / 32] & 110u) {
    // optional bool run_postinstall = 2;
    if (has_run_postinstall()) {
      total_size += 1 + 1;
    }

    // optional string postinstall_path = 3;
    if (has_postinstall_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postinstall_path());
    }

    // optional string filesystem_type = 4;
    if (has_filesystem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filesystem_type());
    }

    // optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
    if (has_old_partition_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_partition_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
    if (has_new_partition_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_partition_info_);
    }

  }
  // optional bool postinstall_optional = 9;
  if (has_postinstall_optional()) {
    total_size += 1 + 1;
  }

  // repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
  total_size += 1 * this->new_partition_signature_size();
  for (int i = 0; i < this->new_partition_signature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_partition_signature(i));
  }

  // repeated .chromeos_update_engine.InstallOperation operations = 8;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PartitionUpdate*>(&from));
}

void PartitionUpdate::MergeFrom(const PartitionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.PartitionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  new_partition_signature_.MergeFrom(from.new_partition_signature_);
  operations_.MergeFrom(from.operations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_name()) {
      set_has_partition_name();
      partition_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
    }
    if (from.has_run_postinstall()) {
      set_run_postinstall(from.run_postinstall());
    }
    if (from.has_postinstall_path()) {
      set_has_postinstall_path();
      postinstall_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postinstall_path_);
    }
    if (from.has_filesystem_type()) {
      set_has_filesystem_type();
      filesystem_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filesystem_type_);
    }
    if (from.has_old_partition_info()) {
      mutable_old_partition_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.old_partition_info());
    }
    if (from.has_new_partition_info()) {
      mutable_new_partition_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.new_partition_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_postinstall_optional()) {
      set_postinstall_optional(from.postinstall_optional());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PartitionUpdate::CopyFrom(const PartitionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.PartitionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->operations())) return false;
  return true;
}

void PartitionUpdate::Swap(PartitionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionUpdate::InternalSwap(PartitionUpdate* other) {
  partition_name_.Swap(&other->partition_name_);
  std::swap(run_postinstall_, other->run_postinstall_);
  postinstall_path_.Swap(&other->postinstall_path_);
  filesystem_type_.Swap(&other->filesystem_type_);
  new_partition_signature_.UnsafeArenaSwap(&other->new_partition_signature_);
  std::swap(old_partition_info_, other->old_partition_info_);
  std::swap(new_partition_info_, other->new_partition_info_);
  operations_.UnsafeArenaSwap(&other->operations_);
  std::swap(postinstall_optional_, other->postinstall_optional_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PartitionUpdate::GetTypeName() const {
  return "chromeos_update_engine.PartitionUpdate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionUpdate

// required string partition_name = 1;
bool PartitionUpdate::has_partition_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartitionUpdate::set_has_partition_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PartitionUpdate::clear_has_partition_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartitionUpdate::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partition_name();
}
 const ::std::string& PartitionUpdate::partition_name() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.partition_name)
  return partition_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionUpdate::set_partition_name(const ::std::string& value) {
  set_has_partition_name();
  partition_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.partition_name)
}
 void PartitionUpdate::set_partition_name(const char* value) {
  set_has_partition_name();
  partition_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionUpdate.partition_name)
}
 void PartitionUpdate::set_partition_name(const char* value, size_t size) {
  set_has_partition_name();
  partition_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionUpdate.partition_name)
}
 ::std::string* PartitionUpdate::mutable_partition_name() {
  set_has_partition_name();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.partition_name)
  return partition_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartitionUpdate::release_partition_name() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.partition_name)
  clear_has_partition_name();
  return partition_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionUpdate::set_allocated_partition_name(::std::string* partition_name) {
  if (partition_name != NULL) {
    set_has_partition_name();
  } else {
    clear_has_partition_name();
  }
  partition_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.partition_name)
}

// optional bool run_postinstall = 2;
bool PartitionUpdate::has_run_postinstall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PartitionUpdate::set_has_run_postinstall() {
  _has_bits_[0] |= 0x00000002u;
}
void PartitionUpdate::clear_has_run_postinstall() {
  _has_bits_[0] &= ~0x00000002u;
}
void PartitionUpdate::clear_run_postinstall() {
  run_postinstall_ = false;
  clear_has_run_postinstall();
}
 bool PartitionUpdate::run_postinstall() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.run_postinstall)
  return run_postinstall_;
}
 void PartitionUpdate::set_run_postinstall(bool value) {
  set_has_run_postinstall();
  run_postinstall_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.run_postinstall)
}

// optional string postinstall_path = 3;
bool PartitionUpdate::has_postinstall_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PartitionUpdate::set_has_postinstall_path() {
  _has_bits_[0] |= 0x00000004u;
}
void PartitionUpdate::clear_has_postinstall_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void PartitionUpdate::clear_postinstall_path() {
  postinstall_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postinstall_path();
}
 const ::std::string& PartitionUpdate::postinstall_path() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.postinstall_path)
  return postinstall_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionUpdate::set_postinstall_path(const ::std::string& value) {
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
 void PartitionUpdate::set_postinstall_path(const char* value) {
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
 void PartitionUpdate::set_postinstall_path(const char* value, size_t size) {
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
 ::std::string* PartitionUpdate::mutable_postinstall_path() {
  set_has_postinstall_path();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.postinstall_path)
  return postinstall_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartitionUpdate::release_postinstall_path() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.postinstall_path)
  clear_has_postinstall_path();
  return postinstall_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionUpdate::set_allocated_postinstall_path(::std::string* postinstall_path) {
  if (postinstall_path != NULL) {
    set_has_postinstall_path();
  } else {
    clear_has_postinstall_path();
  }
  postinstall_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postinstall_path);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.postinstall_path)
}

// optional string filesystem_type = 4;
bool PartitionUpdate::has_filesystem_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PartitionUpdate::set_has_filesystem_type() {
  _has_bits_[0] |= 0x00000008u;
}
void PartitionUpdate::clear_has_filesystem_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void PartitionUpdate::clear_filesystem_type() {
  filesystem_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filesystem_type();
}
 const ::std::string& PartitionUpdate::filesystem_type() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.filesystem_type)
  return filesystem_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionUpdate::set_filesystem_type(const ::std::string& value) {
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
 void PartitionUpdate::set_filesystem_type(const char* value) {
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
 void PartitionUpdate::set_filesystem_type(const char* value, size_t size) {
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
 ::std::string* PartitionUpdate::mutable_filesystem_type() {
  set_has_filesystem_type();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.filesystem_type)
  return filesystem_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartitionUpdate::release_filesystem_type() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.filesystem_type)
  clear_has_filesystem_type();
  return filesystem_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionUpdate::set_allocated_filesystem_type(::std::string* filesystem_type) {
  if (filesystem_type != NULL) {
    set_has_filesystem_type();
  } else {
    clear_has_filesystem_type();
  }
  filesystem_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filesystem_type);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.filesystem_type)
}

// repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
int PartitionUpdate::new_partition_signature_size() const {
  return new_partition_signature_.size();
}
void PartitionUpdate::clear_new_partition_signature() {
  new_partition_signature_.Clear();
}
const ::chromeos_update_engine::Signatures_Signature& PartitionUpdate::new_partition_signature(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_.Get(index);
}
::chromeos_update_engine::Signatures_Signature* PartitionUpdate::mutable_new_partition_signature(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_.Mutable(index);
}
::chromeos_update_engine::Signatures_Signature* PartitionUpdate::add_new_partition_signature() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >*
PartitionUpdate::mutable_new_partition_signature() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return &new_partition_signature_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >&
PartitionUpdate::new_partition_signature() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_;
}

// optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
bool PartitionUpdate::has_old_partition_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PartitionUpdate::set_has_old_partition_info() {
  _has_bits_[0] |= 0x00000020u;
}
void PartitionUpdate::clear_has_old_partition_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void PartitionUpdate::clear_old_partition_info() {
  if (old_partition_info_ != NULL) old_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_old_partition_info();
}
const ::chromeos_update_engine::PartitionInfo& PartitionUpdate::old_partition_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.old_partition_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return old_partition_info_ != NULL ? *old_partition_info_ : *default_instance().old_partition_info_;
#else
  return old_partition_info_ != NULL ? *old_partition_info_ : *default_instance_->old_partition_info_;
#endif
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::mutable_old_partition_info() {
  set_has_old_partition_info();
  if (old_partition_info_ == NULL) {
    old_partition_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.old_partition_info)
  return old_partition_info_;
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::release_old_partition_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.old_partition_info)
  clear_has_old_partition_info();
  ::chromeos_update_engine::PartitionInfo* temp = old_partition_info_;
  old_partition_info_ = NULL;
  return temp;
}
void PartitionUpdate::set_allocated_old_partition_info(::chromeos_update_engine::PartitionInfo* old_partition_info) {
  delete old_partition_info_;
  old_partition_info_ = old_partition_info;
  if (old_partition_info) {
    set_has_old_partition_info();
  } else {
    clear_has_old_partition_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.old_partition_info)
}

// optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
bool PartitionUpdate::has_new_partition_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PartitionUpdate::set_has_new_partition_info() {
  _has_bits_[0] |= 0x00000040u;
}
void PartitionUpdate::clear_has_new_partition_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void PartitionUpdate::clear_new_partition_info() {
  if (new_partition_info_ != NULL) new_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_new_partition_info();
}
const ::chromeos_update_engine::PartitionInfo& PartitionUpdate::new_partition_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.new_partition_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return new_partition_info_ != NULL ? *new_partition_info_ : *default_instance().new_partition_info_;
#else
  return new_partition_info_ != NULL ? *new_partition_info_ : *default_instance_->new_partition_info_;
#endif
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::mutable_new_partition_info() {
  set_has_new_partition_info();
  if (new_partition_info_ == NULL) {
    new_partition_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.new_partition_info)
  return new_partition_info_;
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::release_new_partition_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.new_partition_info)
  clear_has_new_partition_info();
  ::chromeos_update_engine::PartitionInfo* temp = new_partition_info_;
  new_partition_info_ = NULL;
  return temp;
}
void PartitionUpdate::set_allocated_new_partition_info(::chromeos_update_engine::PartitionInfo* new_partition_info) {
  delete new_partition_info_;
  new_partition_info_ = new_partition_info;
  if (new_partition_info) {
    set_has_new_partition_info();
  } else {
    clear_has_new_partition_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.new_partition_info)
}

// repeated .chromeos_update_engine.InstallOperation operations = 8;
int PartitionUpdate::operations_size() const {
  return operations_.size();
}
void PartitionUpdate::clear_operations() {
  operations_.Clear();
}
const ::chromeos_update_engine::InstallOperation& PartitionUpdate::operations(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.operations)
  return operations_.Get(index);
}
::chromeos_update_engine::InstallOperation* PartitionUpdate::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.operations)
  return operations_.Mutable(index);
}
::chromeos_update_engine::InstallOperation* PartitionUpdate::add_operations() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.PartitionUpdate.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >*
PartitionUpdate::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.PartitionUpdate.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >&
PartitionUpdate::operations() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.PartitionUpdate.operations)
  return operations_;
}

// optional bool postinstall_optional = 9;
bool PartitionUpdate::has_postinstall_optional() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PartitionUpdate::set_has_postinstall_optional() {
  _has_bits_[0] |= 0x00000100u;
}
void PartitionUpdate::clear_has_postinstall_optional() {
  _has_bits_[0] &= ~0x00000100u;
}
void PartitionUpdate::clear_postinstall_optional() {
  postinstall_optional_ = false;
  clear_has_postinstall_optional();
}
 bool PartitionUpdate::postinstall_optional() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.postinstall_optional)
  return postinstall_optional_;
}
 void PartitionUpdate::set_postinstall_optional(bool value) {
  set_has_postinstall_optional();
  postinstall_optional_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.postinstall_optional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeltaArchiveManifest(
    DeltaArchiveManifest* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaArchiveManifest::kInstallOperationsFieldNumber;
const int DeltaArchiveManifest::kKernelInstallOperationsFieldNumber;
const int DeltaArchiveManifest::kBlockSizeFieldNumber;
const int DeltaArchiveManifest::kSignaturesOffsetFieldNumber;
const int DeltaArchiveManifest::kSignaturesSizeFieldNumber;
const int DeltaArchiveManifest::kOldKernelInfoFieldNumber;
const int DeltaArchiveManifest::kNewKernelInfoFieldNumber;
const int DeltaArchiveManifest::kOldRootfsInfoFieldNumber;
const int DeltaArchiveManifest::kNewRootfsInfoFieldNumber;
const int DeltaArchiveManifest::kOldImageInfoFieldNumber;
const int DeltaArchiveManifest::kNewImageInfoFieldNumber;
const int DeltaArchiveManifest::kMinorVersionFieldNumber;
const int DeltaArchiveManifest::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaArchiveManifest::DeltaArchiveManifest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.DeltaArchiveManifest)
}

void DeltaArchiveManifest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  old_kernel_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
#else
  old_kernel_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(&::chromeos_update_engine::PartitionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_kernel_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
#else
  new_kernel_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(&::chromeos_update_engine::PartitionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  old_rootfs_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
#else
  old_rootfs_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(&::chromeos_update_engine::PartitionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_rootfs_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
#else
  new_rootfs_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(&::chromeos_update_engine::PartitionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  old_image_info_ = const_cast< ::chromeos_update_engine::ImageInfo*>(
      ::chromeos_update_engine::ImageInfo::internal_default_instance());
#else
  old_image_info_ = const_cast< ::chromeos_update_engine::ImageInfo*>(&::chromeos_update_engine::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_image_info_ = const_cast< ::chromeos_update_engine::ImageInfo*>(
      ::chromeos_update_engine::ImageInfo::internal_default_instance());
#else
  new_image_info_ = const_cast< ::chromeos_update_engine::ImageInfo*>(&::chromeos_update_engine::ImageInfo::default_instance());
#endif
}

DeltaArchiveManifest::DeltaArchiveManifest(const DeltaArchiveManifest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.DeltaArchiveManifest)
}

void DeltaArchiveManifest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_size_ = 4096u;
  signatures_offset_ = GOOGLE_ULONGLONG(0);
  signatures_size_ = GOOGLE_ULONGLONG(0);
  old_kernel_info_ = NULL;
  new_kernel_info_ = NULL;
  old_rootfs_info_ = NULL;
  new_rootfs_info_ = NULL;
  old_image_info_ = NULL;
  new_image_info_ = NULL;
  minor_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaArchiveManifest::~DeltaArchiveManifest() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.DeltaArchiveManifest)
  SharedDtor();
}

void DeltaArchiveManifest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete old_kernel_info_;
    delete new_kernel_info_;
    delete old_rootfs_info_;
    delete new_rootfs_info_;
    delete old_image_info_;
    delete new_image_info_;
  }
}

void DeltaArchiveManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeltaArchiveManifest& DeltaArchiveManifest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_update_5fmetadata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fmetadata_2eproto();
#endif
  return *default_instance_;
}

DeltaArchiveManifest* DeltaArchiveManifest::default_instance_ = NULL;

DeltaArchiveManifest* DeltaArchiveManifest::New(::google::protobuf::Arena* arena) const {
  DeltaArchiveManifest* n = new DeltaArchiveManifest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaArchiveManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.DeltaArchiveManifest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeltaArchiveManifest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeltaArchiveManifest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 252u) {
    ZR_(signatures_offset_, signatures_size_);
    block_size_ = 4096u;
    if (has_old_kernel_info()) {
      if (old_kernel_info_ != NULL) old_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (has_new_kernel_info()) {
      if (new_kernel_info_ != NULL) new_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (has_old_rootfs_info()) {
      if (old_rootfs_info_ != NULL) old_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_new_rootfs_info()) {
      if (new_rootfs_info_ != NULL) new_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (has_old_image_info()) {
      if (old_image_info_ != NULL) old_image_info_->::chromeos_update_engine::ImageInfo::Clear();
    }
    if (has_new_image_info()) {
      if (new_image_info_ != NULL) new_image_info_->::chromeos_update_engine::ImageInfo::Clear();
    }
    minor_version_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  install_operations_.Clear();
  kernel_install_operations_.Clear();
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeltaArchiveManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForDeltaArchiveManifest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.DeltaArchiveManifest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chromeos_update_engine.InstallOperation install_operations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_install_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_install_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_install_operations;
        if (input->ExpectTag(18)) goto parse_loop_kernel_install_operations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_kernel_install_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kernel_install_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_kernel_install_operations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_block_size;
        break;
      }

      // optional uint32 block_size = 3 [default = 4096];
      case 3: {
        if (tag == 24) {
         parse_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_size_)));
          set_has_block_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signatures_offset;
        break;
      }

      // optional uint64 signatures_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_signatures_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signatures_offset_)));
          set_has_signatures_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_signatures_size;
        break;
      }

      // optional uint64 signatures_size = 5;
      case 5: {
        if (tag == 40) {
         parse_signatures_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signatures_size_)));
          set_has_signatures_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_old_kernel_info;
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
      case 6: {
        if (tag == 50) {
         parse_old_kernel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_kernel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_new_kernel_info;
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
      case 7: {
        if (tag == 58) {
         parse_new_kernel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_kernel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_old_rootfs_info;
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
      case 8: {
        if (tag == 66) {
         parse_old_rootfs_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_rootfs_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_new_rootfs_info;
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
      case 9: {
        if (tag == 74) {
         parse_new_rootfs_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_rootfs_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_old_image_info;
        break;
      }

      // optional .chromeos_update_engine.ImageInfo old_image_info = 10;
      case 10: {
        if (tag == 82) {
         parse_old_image_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_image_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_new_image_info;
        break;
      }

      // optional .chromeos_update_engine.ImageInfo new_image_info = 11;
      case 11: {
        if (tag == 90) {
         parse_new_image_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_image_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_minor_version;
        break;
      }

      // optional uint32 minor_version = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_partitions;
        break;
      }

      // repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
      case 13: {
        if (tag == 106) {
         parse_partitions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partitions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_partitions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.DeltaArchiveManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.DeltaArchiveManifest)
  return false;
#undef DO_
}

void DeltaArchiveManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.DeltaArchiveManifest)
  // repeated .chromeos_update_engine.InstallOperation install_operations = 1;
  for (unsigned int i = 0, n = this->install_operations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->install_operations(i), output);
  }

  // repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
  for (unsigned int i = 0, n = this->kernel_install_operations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->kernel_install_operations(i), output);
  }

  // optional uint32 block_size = 3 [default = 4096];
  if (has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->block_size(), output);
  }

  // optional uint64 signatures_offset = 4;
  if (has_signatures_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->signatures_offset(), output);
  }

  // optional uint64 signatures_size = 5;
  if (has_signatures_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->signatures_size(), output);
  }

  // optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
  if (has_old_kernel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->old_kernel_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
  if (has_new_kernel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->new_kernel_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
  if (has_old_rootfs_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->old_rootfs_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
  if (has_new_rootfs_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->new_rootfs_info_, output);
  }

  // optional .chromeos_update_engine.ImageInfo old_image_info = 10;
  if (has_old_image_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->old_image_info_, output);
  }

  // optional .chromeos_update_engine.ImageInfo new_image_info = 11;
  if (has_new_image_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->new_image_info_, output);
  }

  // optional uint32 minor_version = 12 [default = 0];
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->minor_version(), output);
  }

  // repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
  for (unsigned int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->partitions(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.DeltaArchiveManifest)
}

int DeltaArchiveManifest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.DeltaArchiveManifest)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 252u) {
    // optional uint32 block_size = 3 [default = 4096];
    if (has_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_size());
    }

    // optional uint64 signatures_offset = 4;
    if (has_signatures_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signatures_offset());
    }

    // optional uint64 signatures_size = 5;
    if (has_signatures_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signatures_size());
    }

    // optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
    if (has_old_kernel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_kernel_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
    if (has_new_kernel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_kernel_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
    if (has_old_rootfs_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_rootfs_info_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
    if (has_new_rootfs_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_rootfs_info_);
    }

    // optional .chromeos_update_engine.ImageInfo old_image_info = 10;
    if (has_old_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_image_info_);
    }

    // optional .chromeos_update_engine.ImageInfo new_image_info = 11;
    if (has_new_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_image_info_);
    }

    // optional uint32 minor_version = 12 [default = 0];
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_version());
    }

  }
  // repeated .chromeos_update_engine.InstallOperation install_operations = 1;
  total_size += 1 * this->install_operations_size();
  for (int i = 0; i < this->install_operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->install_operations(i));
  }

  // repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
  total_size += 1 * this->kernel_install_operations_size();
  for (int i = 0; i < this->kernel_install_operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kernel_install_operations(i));
  }

  // repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitions(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaArchiveManifest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeltaArchiveManifest*>(&from));
}

void DeltaArchiveManifest::MergeFrom(const DeltaArchiveManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.DeltaArchiveManifest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  install_operations_.MergeFrom(from.install_operations_);
  kernel_install_operations_.MergeFrom(from.kernel_install_operations_);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_block_size()) {
      set_block_size(from.block_size());
    }
    if (from.has_signatures_offset()) {
      set_signatures_offset(from.signatures_offset());
    }
    if (from.has_signatures_size()) {
      set_signatures_size(from.signatures_size());
    }
    if (from.has_old_kernel_info()) {
      mutable_old_kernel_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.old_kernel_info());
    }
    if (from.has_new_kernel_info()) {
      mutable_new_kernel_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.new_kernel_info());
    }
    if (from.has_old_rootfs_info()) {
      mutable_old_rootfs_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.old_rootfs_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_rootfs_info()) {
      mutable_new_rootfs_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.new_rootfs_info());
    }
    if (from.has_old_image_info()) {
      mutable_old_image_info()->::chromeos_update_engine::ImageInfo::MergeFrom(from.old_image_info());
    }
    if (from.has_new_image_info()) {
      mutable_new_image_info()->::chromeos_update_engine::ImageInfo::MergeFrom(from.new_image_info());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DeltaArchiveManifest::CopyFrom(const DeltaArchiveManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.DeltaArchiveManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaArchiveManifest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->install_operations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->kernel_install_operations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->partitions())) return false;
  return true;
}

void DeltaArchiveManifest::Swap(DeltaArchiveManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaArchiveManifest::InternalSwap(DeltaArchiveManifest* other) {
  install_operations_.UnsafeArenaSwap(&other->install_operations_);
  kernel_install_operations_.UnsafeArenaSwap(&other->kernel_install_operations_);
  std::swap(block_size_, other->block_size_);
  std::swap(signatures_offset_, other->signatures_offset_);
  std::swap(signatures_size_, other->signatures_size_);
  std::swap(old_kernel_info_, other->old_kernel_info_);
  std::swap(new_kernel_info_, other->new_kernel_info_);
  std::swap(old_rootfs_info_, other->old_rootfs_info_);
  std::swap(new_rootfs_info_, other->new_rootfs_info_);
  std::swap(old_image_info_, other->old_image_info_);
  std::swap(new_image_info_, other->new_image_info_);
  std::swap(minor_version_, other->minor_version_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeltaArchiveManifest::GetTypeName() const {
  return "chromeos_update_engine.DeltaArchiveManifest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaArchiveManifest

// repeated .chromeos_update_engine.InstallOperation install_operations = 1;
int DeltaArchiveManifest::install_operations_size() const {
  return install_operations_.size();
}
void DeltaArchiveManifest::clear_install_operations() {
  install_operations_.Clear();
}
const ::chromeos_update_engine::InstallOperation& DeltaArchiveManifest::install_operations(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_.Get(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::mutable_install_operations(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_.Mutable(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::add_install_operations() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >*
DeltaArchiveManifest::mutable_install_operations() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return &install_operations_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >&
DeltaArchiveManifest::install_operations() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_;
}

// repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
int DeltaArchiveManifest::kernel_install_operations_size() const {
  return kernel_install_operations_.size();
}
void DeltaArchiveManifest::clear_kernel_install_operations() {
  kernel_install_operations_.Clear();
}
const ::chromeos_update_engine::InstallOperation& DeltaArchiveManifest::kernel_install_operations(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_.Get(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::mutable_kernel_install_operations(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_.Mutable(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::add_kernel_install_operations() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >*
DeltaArchiveManifest::mutable_kernel_install_operations() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return &kernel_install_operations_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >&
DeltaArchiveManifest::kernel_install_operations() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_;
}

// optional uint32 block_size = 3 [default = 4096];
bool DeltaArchiveManifest::has_block_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeltaArchiveManifest::set_has_block_size() {
  _has_bits_[0] |= 0x00000004u;
}
void DeltaArchiveManifest::clear_has_block_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeltaArchiveManifest::clear_block_size() {
  block_size_ = 4096u;
  clear_has_block_size();
}
 ::google::protobuf::uint32 DeltaArchiveManifest::block_size() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.block_size)
  return block_size_;
}
 void DeltaArchiveManifest::set_block_size(::google::protobuf::uint32 value) {
  set_has_block_size();
  block_size_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.block_size)
}

// optional uint64 signatures_offset = 4;
bool DeltaArchiveManifest::has_signatures_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeltaArchiveManifest::set_has_signatures_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void DeltaArchiveManifest::clear_has_signatures_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeltaArchiveManifest::clear_signatures_offset() {
  signatures_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_signatures_offset();
}
 ::google::protobuf::uint64 DeltaArchiveManifest::signatures_offset() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.signatures_offset)
  return signatures_offset_;
}
 void DeltaArchiveManifest::set_signatures_offset(::google::protobuf::uint64 value) {
  set_has_signatures_offset();
  signatures_offset_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.signatures_offset)
}

// optional uint64 signatures_size = 5;
bool DeltaArchiveManifest::has_signatures_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeltaArchiveManifest::set_has_signatures_size() {
  _has_bits_[0] |= 0x00000010u;
}
void DeltaArchiveManifest::clear_has_signatures_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeltaArchiveManifest::clear_signatures_size() {
  signatures_size_ = GOOGLE_ULONGLONG(0);
  clear_has_signatures_size();
}
 ::google::protobuf::uint64 DeltaArchiveManifest::signatures_size() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.signatures_size)
  return signatures_size_;
}
 void DeltaArchiveManifest::set_signatures_size(::google::protobuf::uint64 value) {
  set_has_signatures_size();
  signatures_size_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.signatures_size)
}

// optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
bool DeltaArchiveManifest::has_old_kernel_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeltaArchiveManifest::set_has_old_kernel_info() {
  _has_bits_[0] |= 0x00000020u;
}
void DeltaArchiveManifest::clear_has_old_kernel_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeltaArchiveManifest::clear_old_kernel_info() {
  if (old_kernel_info_ != NULL) old_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_old_kernel_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::old_kernel_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return old_kernel_info_ != NULL ? *old_kernel_info_ : *default_instance().old_kernel_info_;
#else
  return old_kernel_info_ != NULL ? *old_kernel_info_ : *default_instance_->old_kernel_info_;
#endif
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_old_kernel_info() {
  set_has_old_kernel_info();
  if (old_kernel_info_ == NULL) {
    old_kernel_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
  return old_kernel_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_old_kernel_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
  clear_has_old_kernel_info();
  ::chromeos_update_engine::PartitionInfo* temp = old_kernel_info_;
  old_kernel_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_old_kernel_info(::chromeos_update_engine::PartitionInfo* old_kernel_info) {
  delete old_kernel_info_;
  old_kernel_info_ = old_kernel_info;
  if (old_kernel_info) {
    set_has_old_kernel_info();
  } else {
    clear_has_old_kernel_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
}

// optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
bool DeltaArchiveManifest::has_new_kernel_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeltaArchiveManifest::set_has_new_kernel_info() {
  _has_bits_[0] |= 0x00000040u;
}
void DeltaArchiveManifest::clear_has_new_kernel_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeltaArchiveManifest::clear_new_kernel_info() {
  if (new_kernel_info_ != NULL) new_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_new_kernel_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::new_kernel_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return new_kernel_info_ != NULL ? *new_kernel_info_ : *default_instance().new_kernel_info_;
#else
  return new_kernel_info_ != NULL ? *new_kernel_info_ : *default_instance_->new_kernel_info_;
#endif
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_new_kernel_info() {
  set_has_new_kernel_info();
  if (new_kernel_info_ == NULL) {
    new_kernel_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
  return new_kernel_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_new_kernel_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
  clear_has_new_kernel_info();
  ::chromeos_update_engine::PartitionInfo* temp = new_kernel_info_;
  new_kernel_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_new_kernel_info(::chromeos_update_engine::PartitionInfo* new_kernel_info) {
  delete new_kernel_info_;
  new_kernel_info_ = new_kernel_info;
  if (new_kernel_info) {
    set_has_new_kernel_info();
  } else {
    clear_has_new_kernel_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
}

// optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
bool DeltaArchiveManifest::has_old_rootfs_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeltaArchiveManifest::set_has_old_rootfs_info() {
  _has_bits_[0] |= 0x00000080u;
}
void DeltaArchiveManifest::clear_has_old_rootfs_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeltaArchiveManifest::clear_old_rootfs_info() {
  if (old_rootfs_info_ != NULL) old_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_old_rootfs_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::old_rootfs_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return old_rootfs_info_ != NULL ? *old_rootfs_info_ : *default_instance().old_rootfs_info_;
#else
  return old_rootfs_info_ != NULL ? *old_rootfs_info_ : *default_instance_->old_rootfs_info_;
#endif
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_old_rootfs_info() {
  set_has_old_rootfs_info();
  if (old_rootfs_info_ == NULL) {
    old_rootfs_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
  return old_rootfs_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_old_rootfs_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
  clear_has_old_rootfs_info();
  ::chromeos_update_engine::PartitionInfo* temp = old_rootfs_info_;
  old_rootfs_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_old_rootfs_info(::chromeos_update_engine::PartitionInfo* old_rootfs_info) {
  delete old_rootfs_info_;
  old_rootfs_info_ = old_rootfs_info;
  if (old_rootfs_info) {
    set_has_old_rootfs_info();
  } else {
    clear_has_old_rootfs_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
}

// optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
bool DeltaArchiveManifest::has_new_rootfs_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeltaArchiveManifest::set_has_new_rootfs_info() {
  _has_bits_[0] |= 0x00000100u;
}
void DeltaArchiveManifest::clear_has_new_rootfs_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeltaArchiveManifest::clear_new_rootfs_info() {
  if (new_rootfs_info_ != NULL) new_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_new_rootfs_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::new_rootfs_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return new_rootfs_info_ != NULL ? *new_rootfs_info_ : *default_instance().new_rootfs_info_;
#else
  return new_rootfs_info_ != NULL ? *new_rootfs_info_ : *default_instance_->new_rootfs_info_;
#endif
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_new_rootfs_info() {
  set_has_new_rootfs_info();
  if (new_rootfs_info_ == NULL) {
    new_rootfs_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
  return new_rootfs_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_new_rootfs_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
  clear_has_new_rootfs_info();
  ::chromeos_update_engine::PartitionInfo* temp = new_rootfs_info_;
  new_rootfs_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_new_rootfs_info(::chromeos_update_engine::PartitionInfo* new_rootfs_info) {
  delete new_rootfs_info_;
  new_rootfs_info_ = new_rootfs_info;
  if (new_rootfs_info) {
    set_has_new_rootfs_info();
  } else {
    clear_has_new_rootfs_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
}

// optional .chromeos_update_engine.ImageInfo old_image_info = 10;
bool DeltaArchiveManifest::has_old_image_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeltaArchiveManifest::set_has_old_image_info() {
  _has_bits_[0] |= 0x00000200u;
}
void DeltaArchiveManifest::clear_has_old_image_info() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeltaArchiveManifest::clear_old_image_info() {
  if (old_image_info_ != NULL) old_image_info_->::chromeos_update_engine::ImageInfo::Clear();
  clear_has_old_image_info();
}
const ::chromeos_update_engine::ImageInfo& DeltaArchiveManifest::old_image_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return old_image_info_ != NULL ? *old_image_info_ : *default_instance().old_image_info_;
#else
  return old_image_info_ != NULL ? *old_image_info_ : *default_instance_->old_image_info_;
#endif
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::mutable_old_image_info() {
  set_has_old_image_info();
  if (old_image_info_ == NULL) {
    old_image_info_ = new ::chromeos_update_engine::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
  return old_image_info_;
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::release_old_image_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
  clear_has_old_image_info();
  ::chromeos_update_engine::ImageInfo* temp = old_image_info_;
  old_image_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_old_image_info(::chromeos_update_engine::ImageInfo* old_image_info) {
  delete old_image_info_;
  old_image_info_ = old_image_info;
  if (old_image_info) {
    set_has_old_image_info();
  } else {
    clear_has_old_image_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
}

// optional .chromeos_update_engine.ImageInfo new_image_info = 11;
bool DeltaArchiveManifest::has_new_image_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DeltaArchiveManifest::set_has_new_image_info() {
  _has_bits_[0] |= 0x00000400u;
}
void DeltaArchiveManifest::clear_has_new_image_info() {
  _has_bits_[0] &= ~0x00000400u;
}
void DeltaArchiveManifest::clear_new_image_info() {
  if (new_image_info_ != NULL) new_image_info_->::chromeos_update_engine::ImageInfo::Clear();
  clear_has_new_image_info();
}
const ::chromeos_update_engine::ImageInfo& DeltaArchiveManifest::new_image_info() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return new_image_info_ != NULL ? *new_image_info_ : *default_instance().new_image_info_;
#else
  return new_image_info_ != NULL ? *new_image_info_ : *default_instance_->new_image_info_;
#endif
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::mutable_new_image_info() {
  set_has_new_image_info();
  if (new_image_info_ == NULL) {
    new_image_info_ = new ::chromeos_update_engine::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
  return new_image_info_;
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::release_new_image_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
  clear_has_new_image_info();
  ::chromeos_update_engine::ImageInfo* temp = new_image_info_;
  new_image_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_new_image_info(::chromeos_update_engine::ImageInfo* new_image_info) {
  delete new_image_info_;
  new_image_info_ = new_image_info;
  if (new_image_info) {
    set_has_new_image_info();
  } else {
    clear_has_new_image_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
}

// optional uint32 minor_version = 12 [default = 0];
bool DeltaArchiveManifest::has_minor_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DeltaArchiveManifest::set_has_minor_version() {
  _has_bits_[0] |= 0x00000800u;
}
void DeltaArchiveManifest::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000800u;
}
void DeltaArchiveManifest::clear_minor_version() {
  minor_version_ = 0u;
  clear_has_minor_version();
}
 ::google::protobuf::uint32 DeltaArchiveManifest::minor_version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.minor_version)
  return minor_version_;
}
 void DeltaArchiveManifest::set_minor_version(::google::protobuf::uint32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.minor_version)
}

// repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
int DeltaArchiveManifest::partitions_size() const {
  return partitions_.size();
}
void DeltaArchiveManifest::clear_partitions() {
  partitions_.Clear();
}
const ::chromeos_update_engine::PartitionUpdate& DeltaArchiveManifest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_.Get(index);
}
::chromeos_update_engine::PartitionUpdate* DeltaArchiveManifest::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_.Mutable(index);
}
::chromeos_update_engine::PartitionUpdate* DeltaArchiveManifest::add_partitions() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::PartitionUpdate >*
DeltaArchiveManifest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return &partitions_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::PartitionUpdate >&
DeltaArchiveManifest::partitions() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chromeos_update_engine

// @@protoc_insertion_point(global_scope)
